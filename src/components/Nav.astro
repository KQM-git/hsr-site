---
/* TODO:
 * Add dropdown for switching sites
 * Add dropdown for data bank
 * Add arrow key support for moving between menu items
 * Clean up scripts
 */

/* BREAKPOINTS: SM, LG, XL */

import ExpandDown from "./ui/ExpandDown.astro";
import Hamburger from "./ui/Hamburger.astro";
import Searchbar from "./Searchbar.astro";

const dataPaths = [
  "Characters",
  "Light Cones",
  "Relics",
  "Mechanics",
  "Enemies",
  "Tools",
  "Vault",
];
---

<script>
  const navMenuToggle = document.querySelector(
    "#button-toggle-nav"
  ) as HTMLButtonElement;
  const navMenu = document.querySelector("#container-nav-links") as HTMLElement;
  const nonNav = document.querySelectorAll(
    "main, footer"
  ) as NodeListOf<HTMLElement>;

  // note: navMenuToggle aria-expanded should be canon for whether the menu is open
  // Prevent navbar and body from staying inert if resizing screen
  function handleResize() {
    const width =
      window.innerWidth ||
      document.documentElement.clientWidth ||
      document.body.clientWidth;
    if (width < 1024) {
      // mobile - check if menu is open and assign inert accordingly
      navMenuToggle.ariaExpanded ??= "false";
      if (navMenuToggle.ariaExpanded === "false") {
        navMenu.inert = true;
        nonNav.forEach((el) => (el.inert = false));
      } else if (navMenuToggle.ariaExpanded === "true") {
        navMenu.inert = false;
        nonNav.forEach((el) => (el.inert = true));
      }
    } else {
      // desktop - menu no longer expands, nothing should be inert
      navMenuToggle.ariaExpanded = null;
      navMenu.inert = false;
      nonNav.forEach((el) => (el.inert = false));
    }
  }
  handleResize();
  window.addEventListener("resize", handleResize);

  // Show / Hide the navigation menu on mobile
  function toggleNavMenu() {
    if (navMenuToggle.ariaExpanded === "true") {
      navMenuToggle.ariaExpanded = "false";
      navMenu.inert = true;
      nonNav.forEach((el) => (el.inert = false));
    } else {
      navMenuToggle.ariaExpanded = "true";
      navMenu.inert = false;
      nonNav.forEach((el) => (el.inert = true));
    }
  }
  navMenuToggle?.addEventListener("click", toggleNavMenu);

  // close nav menu when escape is pressed
  function checkEscapeMenu(e: KeyboardEvent) {
    if (e.key === "Escape" && navMenuToggle.ariaExpanded === "true") {
      toggleNavMenu();
      navMenuToggle.focus();
    }
  }

  window.addEventListener("keydown", checkEscapeMenu);
</script>

<header class="w-full fixed top-0 z-10">
  <nav
    aria-label="Main"
    class="grid min-h-[60px] grid-cols-[auto_1fr_auto] items-center bg-bg px-4"
  >
    <a href="/" class="flex items-center gap-2 z-30">
      <img src="/img/logo_full.png" height="48" width="60" alt="" />
      <span class="text-lg font-bold pt-2 font-serif flex items-center gap-2">
        KQM: Star Rail
        <ExpandDown width="12px" height="7px" />
      </span>
    </a>
    <div class="lg:hidden"></div>
    <button
      id="button-toggle-nav"
      class="lg:hidden mt-1 mr-2 p-2 z-30 peer"
      aria-controls="container-nav-links"
      aria-expanded="false"
    >
      <Hamburger width="32" height="32" />
    </button>
    <div
      id="container-nav-links"
      class="peer-aria-collapsed:-translate-y-full min-h-screen right-0 left-0 top-0 px-12 pt-24 pb-16 bg-bg transition-transform absolute overflow-hidden lg:contents"
    >
      <ul
        id="nav-links"
        class="flex flex-col lg:flex-row text-base font-bold gap-12 lg:gap-8 justify-center"
      >
        <li>
          <a href="/guides" id="nav-links-guides" class="navlink">GUIDES</a>
        </li>
        <li class="block lg:flex items-center relative">
          <a href="/data" id="nav-links-data" class="navlink">DATA BANK</a>
          <button
            id="nav-links-data-expand"
            class="w-8 pt-2 h-full text-center hidden lg:block"
            aria-expanded="false"
            aria-controls="nav-links-data-menu"
            aria-label="Show Data Bank Pages"
          >
            <ExpandDown className="ml-auto mr-auto" width="12px" height="7px" />
          </button>
          <ul
            id="nav-links-data-menu"
            class="lg:hidden lg:absolute w-full top-full mt-[14px] bg-bg"
          >
            {
              dataPaths.map((pg) => (
                <li class="block mb-1">
                  <a
                    class="block p-2 pl-4 subhref"
                    href={pg.toLocaleLowerCase().replaceAll(" ", "-")}
                  >
                    {pg}
                  </a>
                </li>
              ))
            }
          </ul>
        </li>
        <li><a href="/about" id="nav-links-about" class="navlink">ABOUT</a></li>
        <li>
          <a href="/contact" id="nav-links-contact" class="navlink">CONTACT</a>
        </li>
      </ul>
      <Searchbar id="nav-searchbar" />
    </div>
  </nav>
</header>
<script>
  const dataMenuToggle = document.querySelector(
    "#nav-links-data-expand"
  ) as HTMLButtonElement;
  const dataMenuDropdown = document.querySelector(
    "#nav-links-data-menu"
  ) as HTMLElement;

  // close nav menu when escape is pressed
  function checkEscapeMenu(e: KeyboardEvent) {
    if (e.key === "Escape" && dataMenuToggle.ariaExpanded === "true") {
      toggleMenuDropdown();
      dataMenuToggle.focus();
    }
  }
  // close nav menu when click elsewhere
  function checkMouseClickMenu(e: MouseEvent) {
    if (
      !dataMenuToggle.contains(e.target as HTMLElement) &&
      !dataMenuDropdown.contains(e.target as HTMLElement) &&
      dataMenuToggle.ariaExpanded === "true"
    ) {
      toggleMenuDropdown();
      dataMenuToggle.focus();
    }
  }

  function toggleMenuDropdown() {
    if (dataMenuToggle.ariaExpanded === "true") {
      dataMenuToggle.ariaExpanded = "false";
      dataMenuDropdown.classList.add("lg:hidden");
      window.removeEventListener("keydown", checkEscapeMenu);
      window.removeEventListener("click", checkMouseClickMenu);
    } else {
      dataMenuToggle.ariaExpanded = "true";
      dataMenuDropdown.classList.remove("lg:hidden");
      window.addEventListener("keydown", checkEscapeMenu);
      window.addEventListener("click", checkMouseClickMenu);
    }
  }
  dataMenuToggle?.addEventListener("click", toggleMenuDropdown);
</script>

<style>
  li {
    display: contents;
  }

  .navlink {
    position: relative;
    padding-top: 8px;
    padding-left: 24px;
  }
  .navlink::before {
    content: "";
    background-size: contain;
    display: block;
    width: 48px;
    height: 48px;
    position: absolute;
    top: -8px;
    left: 0;
    opacity: 25%;
  }
  #nav-links-guides:before {
    background-image: url("/img/ui/icon_guide.png");
  }
  #nav-links-data:before {
    background-image: url("/img/ui/icon_data.png");
  }
  #nav-links-about:before {
    background-image: url("/img/ui/icon_team.png");
  }
  #nav-links-contact:before {
    background-image: url("/img/ui/icon_contact.png");
  }

  a.subhref:hover {
    position: relative;
  }

  a.subhref::after {
    content: "";
    width: 0px;
    background-color: white;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }
  a.subhref:hover:after {
    content: "";
    transition: width 0.15s;
    transition-delay: 0.05s;
    width: 4px;
  }

  a.subhref::before {
    content: "";
    display: inline-block;
    margin: 0 0.25em;
    transform: skew(-18deg) translateY(0.05em);
    border-right: 0.18em solid currentcolor;
    height: 0.9em;
  }
  a.subhref:hover:before {
    margin: 0 0.4em;
  }
</style>
